
import ogr
import gdalconst
import sys
import os


# TASK 1
filename = r'C:\Users\jroze\Google Drive\Schoolwork\University of Wisconsin\Geog_378\Labs\Lab 8\PowerLine\PowerLine.shp'

try:
    #need a driver for specific file type
    driver = ogr.GetDriverByName('ESRI Shapefile')

    #open the file using the required driver
    dataSource = driver.Open(filename, gdalconst.GA_ReadOnly)

    #verify the file was opened, exit if not
    if dataSource is None:
        print 'Failed to open file'
        sys.exit(1)

    #get the first (and only) data layer
    layer       = dataSource.GetLayer(0)
    feat = layer.GetFeature(0)
    line  = feat.GetGeometryRef()
    nPts = line.GetPointCount()

    # This section calculates the length of the line. Each loop adds the length of the 
    # segment to the overall line length
    lineLength = 0
    for i in range(nPts - 1):
        point = line.GetPoint(i)
        x1 = line.GetX(i)
        y1 = line.GetY(i)
        x2 = line.GetX(i+1)
        y2 = line.GetY(i+1)
        d = (abs(x1 - x2)**2 + abs(y1 - y2)**2)**0.5
        lineLength += d
    print "cumulative distance is %.2f miles or %.2f feet" % (lineLength / 5280, lineLength)

except:
    print "Unable to calculate the length of the line"

#close the file
dataSource.Destroy()


# TASK 2: Extend the program in task 2 so that it also opens Parcels.shp. Print out the
# attribute names and attribute data types of the layer. (Note that this question does 
#vnot ask for attribute values of any parcel.)

filename = r'C:\Users\jroze\Google Drive\Schoolwork\University of Wisconsin\Geog_378\Labs\Lab 8\Parcels\Parcels.shp'

try:
    # Need a driver for specific file type
    driver = ogr.GetDriverByName('ESRI Shapefile')

    # Open the file using the required driver parcel file
    dataSource = driver.Open(filename, gdalconst.GA_ReadOnly)

    # get the layer
    layer = dataSource.GetLayer(0)

    #get basic info about the layer
    layerName   = layer.GetName()
    layerTypeInt = layer.GetGeomType()
    layerExtent = layer.GetExtent()
 
 
    #convert integer layertype to text equivalent
    layerTypeStr = ogr.GeometryTypeToName(layerTypeInt)
 
    #print the name, type and extent of layer
    print '\nLayer', layerName,'is a', layerTypeStr,'layer.'

    #get access to the layer's non-spatial info: number of fields,
    #field names, field types, etc.
    featureDefn = layer.GetLayerDefn()
 
    #Get and print the number of fields
    fieldCount = featureDefn.GetFieldCount()
 
    print "\nThe layer's feature definition has the following", fieldCount, "fields:"
 
    #Print info about every field
    for i in range(0,fieldCount):
        fieldDef   = featureDefn.GetFieldDefn(i)
        fname      = fieldDef.GetNameRef()
        fwidth     = fieldDef.GetWidth()
        fprecision = fieldDef.GetPrecision()
        ftype      = fieldDef.GetType()
 
        #convert integer ftype to text equiv
        ftypeS = fieldDef.GetFieldTypeName(ftype)
  
        values = (fname,ftypeS,fwidth,fprecision)
        fmt  = '%s: %s (%d.%d)'
        print fmt % values

except:
    print "Unable to print attribute names and data."

# Task 3: (5 pts.)
# Extend the program in Task 2 to print out the owner’s address ("SITUSADDR") and the
# area of every parcel crossed by the power line.
try:
    featureCount = layer.GetFeatureCount() #Gets the count of the features in the layer

    for i in range(0,featureCount):
  
        #Get a feature
        feature = layer.GetFeature(i)
   
        # Geometry
        geometry = feature.GetGeometryRef()
  
        #When the geometry crosses, print out the address and area.
        if geometry.Crosses(line) is True:
            print "\nThe powerline crosses the parcel located at %s. Its area is %.0f" % (feature.SITUSADDR, feature.AREA)
   
        #Free memory for the feature
        feature = None

except:
    print "unable to print owner's address and area of parcel"

# Task 4: (5 pts.)
# More than a few people believe electromagnetic fields generated by power lines are a
# health hazard and don’t want to live within 250 feet of a power line. Write a Python
# program to construct a shapefile consisting of every parcel entirely within a 250 foot
# buffer of the proposed power line. Open your newly created file and the power line
# shape file in ArcGIS or QGIS. Create a 250 foot buffer of the power line using the GIS
# program. Display all three layers and make a screen shot or print the map to a pdf
# file. Turn in the image or pdf file and your Python program.

powerFile = r'C:\Users\jroze\Google Drive\Schoolwork\University of Wisconsin\Geog_378\Labs\Lab 8\PowerLine\PowerLine.shp'
parcelFile = r'C:\Users\jroze\Google Drive\Schoolwork\University of Wisconsin\Geog_378\Labs\Lab 8\Parcels\Parcels.shp'


# Open data Sources for the powerline and the parcels
powerSource = driver.Open(powerFile, gdalconst.GA_ReadOnly)
parcelSource = driver.Open(parcelFile, gdalconst.GA_ReadOnly)

# Input and output files, as well as a data directory
DataDir = "C:\\Users\\jroze\\Google Drive\\Schoolwork\\University of Wisconsin\\Geog_378\\Labs\\Lab 8\\"
InputFileName  = powerFile
OutputFileName = DataDir + "PowerBuffer.shp"

 
bufferWidth    = 250 #250 ft buffer


#driver = ogr.GetDriverByName('ESRI Shapefile')
inputDS = driver.Open(InputFileName)
if inputDS is None:
    print "Couldn't open input file",InputFileName
    sys.exit(1)
    
inputLayer  = inputDS.GetLayer()
extent      = inputLayer.GetExtent()
 
#must get rid of output file if it exists before creating new one
if os.path.exists(OutputFileName):
    os.remove(OutputFileName)
 
#create data store in same format as input (shapefile)
try:
    outputDS = driver.CreateDataSource(OutputFileName)
except:
    print 'Could not create output file',OutputFileName
    sys.exit(1)

try:
    # get the layer
    parcelLayer = parcelSource.GetLayer(0)

    # Get the count of the number of features
    featureCount = parcelLayer.GetFeatureCount()


    #Set the SRS. Borrow from the spatial reference
    SRS = parcelLayer.GetSpatialRef()

    #create polygon layer to hold buffer
    newLayer = outputDS.CreateLayer('PowerBuff', SRS, geom_type=ogr.wkbPolygon)
    if newLayer is None:
        print "couldn't create layer for buffer in output DS"
        sys.exit(1)
 
    newLayerDef = newLayer.GetLayerDefn() #every feature in layer will have this
 
    #work through input features and buffer the geometry of each
    featureID   = 0
    oldFeature  = inputLayer.GetNextFeature()
    while oldFeature:
        geometry = oldFeature.GetGeometryRef()
        buffer   = geometry.Buffer(bufferWidth)
        try:
            newFeature = ogr.Feature(newLayerDef) #create feature
            newFeature.SetGeometry(buffer)        #add geometry
            newFeature.SetFID(featureID)          #set id
            newLayer.CreateFeature(newFeature)    #add feature to layer
        except:
            print "error adding buffer"
 
            newFeature = None
            oldFeature = None
 
        oldFeature = inputLayer.GetNextFeature()
        featureID += 1
 
 
    print 'Buffered', featureID, 'input features'

except:
    print "Unable to create new layer"
 
inputDS = None
outputDS = None

print "closed the input and output files"


# Part 2 of Task 4
# This section is responsible for identifying and writing the parcels that overlap with
# the buffer zone on the powerline
try:
    bufferFile = OutputFileName # the previous output file is assigned to the new bufferfile

    finalFile = DataDir + "OverlappingParcels"

    # Remove output, if it exists
    if os.path.exists(finalFile):
        os.remove(finalFile)

    # Open data Sources for the parcel and buffer shapefiles
    bufferSource = driver.Open(bufferFile, gdalconst.GA_ReadOnly)
    parcelSource = driver.Open(parcelFile, gdalconst.GA_ReadOnly)

    # Create data source for output Shapefile
    finalDS = driver.CreateDataSource(finalFile)

    #Create Layer for final data
    overLayer = finalDS.CreateLayer("OverlappingParcels",SRS,ogr.wkbPolygon)

    # Get the buffer and parcel layers
    bufferLayer = bufferSource.GetLayer(0)
    parcelLayer = parcelSource.GetLayer(0)


    # Need to get featurelayer
    featureDefn = parcelLayer.GetLayerDefn()
 
    #get and print the number of fields
    fieldCount = featureDefn.GetFieldCount()

    for i in range(0,fieldCount):
        try:
            fieldDef   = featureDefn.GetFieldDefn(i)
            overLayer.CreateField(fieldDef)
        except:
            print "Unable to assign field definitions"

    # Get the count of the number of features in the parcel layer
    featureCount = parcelLayer.GetFeatureCount()


    # Get features and geometry from the buffer layers (This is not in the loop because it
    # is persistent across loops)
    bufferFeat = bufferLayer.GetFeature(0)
    bufferGeom = bufferFeat.GetGeometryRef()

    print "Retrieved bufferFeat and buferGeom without error"

except:
    print "Unable to create new layer"

trueCount = 0
featureDef = overLayer.GetLayerDefn()

for i in range(0,featureCount):
    try:
        feature = parcelLayer.GetFeature(i)

        # Geometries
        geometry = feature.GetGeometryRef()

        # When the geometry crosses or is within the bufferzone, add it to the feature
        # layer.
        if geometry.Overlaps(bufferGeom) or geometry.Within(bufferGeom) is True:
            newFeature = ogr.Feature(featureDef)
        
            newFeature.SetField('AREA', feature.AREA)
            newFeature.SetField('PERIMETER', feature.PERIMETER)
            newFeature.SetField('PARCEL_', feature.PARCEL_)
            newFeature.SetField('PARCEL_ID', feature.PARCEL_ID)
            newFeature.SetField('PARNUMA', feature.PARNUMA)
            newFeature.SetField('PREVPARNUM', feature.PREVPARNUM)
            newFeature.SetField('EDITDATE', feature.EDITDATE)
            newFeature.SetField('SITUSADDR', feature.SITUSADDR)
            newFeature.SetField('SITUSUNIT', feature.SITUSUNIT)
            newFeature.SetField('CONDO', feature.CONDO)
            newFeature.SetField('ZONING', feature.ZONING)
            newFeature.SetField('USECODE', feature.USECODE)
        
            newFeature.SetGeometry(geometry)
        
            overLayer.CreateFeature(newFeature)
            trueCount += 1

        feature = None
    except:
        print "Unable to add features to new Layer"
        

# Number of features 
newFeatureCount = overLayer.GetFeatureCount()

print "The new layer has %.0f features" % newFeatureCount

finalDS = None



















